{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs24 \cf2 Short Answer:\
1) Encapsulation is: A langu__age mechanism for restricting direct access to some of the object's components. or a langu__age construct that facilitates the bundling of data with the methods (or other functions) operating on that data.\
2) To secure the data from outside access and modifications that you don't want.\
3) The main difference between a class and an instance of a class is that a class provides a blueprint to the instancesbut isn't a real entity. An instance of the class is a real entity which actually uses its definitions.\
4) method: get_dollar(), reference: wallet\
5) it references which parameter the problem should work on.\
6) using a private variable (starting with 2 underscores)\
7) By passing the object to the built-in str method\
\
\
work work\
2)\
\
class Book:\
    def __init__(self):\
        self.bookTitle = ""\
        self.author__name = ""\
        self.publisher__name = ""\
\
def __str__(self):\
    return '%.2d:%.2d:%.2d' % (self.bookTitle, self.author__name, self.publisher__name)\
\
\
Programming Exercises\
1) Pet Class\
class Pet:\
    def __init__(self, name, animal_type, age):\
        self.__name = name\
        self.__animal_type = animal_type\
        self.__age = __agagee\
\
    def set___name(self, __name):\
        self.__name = __name\
\
    def set_type(self, animal_type):\
        self.__animal_type = animal_type\
\
    def set___age(self, __age):\
        self.__age = __age\
\
    def get___name(self):\
        return self.__name\
\
    def get_animal_type(self):\
        return self.__animal_type\
\
    def get___age(self):\
        return self.__age\
\
\
def main():\
    pets = Pet("Spot", "Dog", 9)\
    print('Pet __name: ', pets.get___name())\
    print('Animal Type: ', pets.get_animal_type())\
    print('__Age: ', pets.get___age())\
\
main()\
\
\
2) Car Class\
Car class\
class Car:\
    def __init__(self, make, speed, year_model):\
        self.__make = make\
        self.__speed = speed\
        self.__year_model_model = year_model\
\
    def set_make(self, make):\
        self.__make = make\
\
    def set_speed(self, speed):\
        self.__speed = speed\
\
    def set_year_model(self, year_model):\
        self.__year_model_model = year_model\
\
    def get_make(self):\
        return self.__make\
\
    def get_speed(self):\
        return self.__speed\
\
    def get_year_model(self):\
        return self.__year_model_model\
\
    def accelerate(self):\
         self.__speed = self.__speed + 5\
\
    def brake(self):\
         self.__speed = self.__speed - 5\
\
\
def main():\
    print("hi!")\
    vroom = Car("Dodge Viper", 60, "1943")\
    vroom.accelerate()\
    print(vroom.get_speed())\
    vroom.accelerate()\
    print(vroom.get_speed())\
    vroom.accelerate()\
    print(vroom.get_speed())\
    vroom.accelerate()\
    print(vroom.get_speed())\
    vroom.accelerate()\
    print(vroom.get_speed())\
\
main()\
\
3) Personal Information\
class Information:\
    def __init__(self,name,address,age,phoneNumber):\
        self.__name = name\
        self.__address = address\
        self.__age = age\
        self.__phoneNumber = phoneNumber\
    def setName(self,name):\
        self.__name=name\
    def getName(self):\
        return self.__name\
    def setAddress(self,address):\
        self.__address = address\
    def getAddress(self):\
        return self.__address\
    def setAge(self,age):\
        self.__age=age\
    def getAge(self):\
        return self.__age\
    def setPhoneNumber(self,phoneNumber):\
        self.__phoneNumber = phoneNumber\
    def getPhoneNumber(self):\
        return self.__phoneNumber\
\
def main():\
    Me = Information("Fred","123 Street",45,982173)\
    George = Information("George","246 Lane",45,982828)\
    Ron = Information("Ron","12 Grimauld Place",40,638921)\
\
main()\
\
4) Employee\
class Employee:\
    def __init__(self, name, id, department, jobTitle):\
        self.__name = name\
        self.__id = id\
        self.__department = department\
        self.__jobTitle = jobTitle\
\
    def getName(self):\
        return self.__name\
\
    def getID(self):\
        return self.__id\
\
    def getDepartment(self):\
        return self.__department\
\
    def getJobTitle(self):\
        return self.__jobTitle\
\
\
def main():\
    susan = Employee("Susan Meyers", 47899, "Accounting", "Vice Presidene")\
    mark = Employee("Mark Jones", 39119, "IT", "Programmer")\
    joy = Employee("Joy Rodgers", 81774, "Manufacturing", "Engineer")\
\
    joyObject = \{\
        "name":  joy.getName(),\
        "id":  joy.getID(),\
        "department":  joy.getDepartment(),\
        "title":  joy.getJobTitle()\
    \}\
    markObject = \{\
        "name":  mark.getName(),\
        "id":  mark.getID(),\
        "department":  mark.getDepartment(),\
        "title":  mark.getJobTitle()\
    \}\
    susanObject = \{\
        "name":  susan.getName(),\
        "id":  susan.getID(),\
        "department":  susan.getDepartment(),\
        "title":  susan.getJobTitle()\
    \}\
\
    for value in joyObject.items():\
        print (value)\
    print('\\n')\
    for value in markObject.items():\
        print (value)\
    print('\\n')\
    for value in susanObject.items():\
        print (value)\
    print('\\n')\
\
main()\
\
}