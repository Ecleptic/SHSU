/*    Dots.java    Title:          Dots    Author:         Laura Toma based on code from Eric Chown based on code from Northeastern University    Description:    This program can be used to draw geometric puzzles                    through the use of loop structures. *//////////////////////////////////////////////////////////////////////////////////  Lab:    Dot Patterns//  Goals:  Learn Standard Patterns of Single, Double, or Triple Looping//          Complexity analysis of loop structures//  STUDENT NAME: Cameron Green//  DATE: 09/07/2016///////////////////////////////////////////////////////////////////////////////import java.io.*;import java.util.Scanner;public class Dots{public static final int MAXPATTERN = 16;             // maximun number of patternspublic static final int STARTX = 0;           // X location of drawing windowpublic static final int STARTY = 0;           // Y location of drawing windowpublic static final int SOLX = 401;           // X location of solution windowpublic static final int SOLY = STARTY;        // Y location of solution windowprivate DrawingBoard board;                   // the drawing windowprivate DrawingBoard solutionBoard;           // solution windowprivate SolutionDots solution;                // the object that knows how to draw the solutionScanner reader;                               // object for reading from userprivate int pattern = 0;                      // the pattern we are currently on/** the constructor: creates the boards, and opens stdin for reading from user */public Dots(){        board = new DrawingBoard(STARTX, STARTY);        solutionBoard = new DrawingBoard(SOLX, SOLY);        solution = new SolutionDots(solutionBoard);        reader = new Scanner(System.in);}/** Method which makes drawing calls.  Your code goes in here.  Do   not add any variables! */public void drawPattern(int pattern){        int row;         // loop variable        int col;         // loop variable        int k;           // extra loop variable        int COLS = 8;    // constant        int ROWS = 8;    // constant        board.clear();        //set title        board.setTitle("Your pattern " + pattern);        //draw the correct pattern        solution.draw(pattern);        // draw your pattern        // assume maximum number of dots in each row or col is 8        switch (pattern) {        case 0:        /* Default Template */        // for (;; ) {        //         for (;; ) {        //                 board.bigDot();        //         }        // }        // break;        case 1:                /*                   Vanilla case. Gives me an idea of what to do.                 */                for (row = 0; row < ROWS; row++)                        for (col = 0; col < COLS; col++)                                board.bigDot(row, col);                break;        case 2:                /*                   Switch col and row when drawing, whoopty freaking doo. I could have also switched the place of the for loops and had col be the outside loop and row be the inside loop.                 */                for (row = 0; row < ROWS; row++)                        for (col = 0; col < COLS; col++)                                board.bigDot(col, row);                break;        case 3:                /*                   starting to get difficult (maybe) we just need to have col grow as row grows.                 */                for (row = 0; row < ROWS; row++) {                        for (col = 0; col < row; col++) {                                board.bigDot(row, col);                        }                }                break;        case 4:                /*                   start large and then move to the right (or go from the bottom up.) I started large and it shrunk as row got larger (kinda creating a blank space that row is taking up?)                 */                for (row = 0; row < ROWS; row++) {                        for (col = row; col < COLS; col++ ) {                                board.bigDot(row, col);                        }                }                break;        case 5:                /*                   I'm assuming we're allowed to manipulate ROWS (I don't see why not it resets after each break)                   You notice I start the first for loop with col. That's because I was trying to create the invrse of 3&4 but that didn't work.                 */                for (col = 0; col < COLS; col++, ROWS--) {                        for (row = 0; row < ROWS; row++) {                                board.bigDot(col, row);                        }                }                break;        case 6:                /*                   For a while I tried to just copy/reverse/duplicate 3,4,and 5. But that's not exactly how this works. Technichally I'm reversing it now, but you can't just write the opposite for it to give you the opposite.                 */                for(row = 0; row < ROWS; row++)                        for(col = COLS; col >= COLS - row; col--)                                board.bigDot(row,col);                break;        case 7:                /*                   The nmumbers need to be the same throughout the whole distance and the line is 9 long instead of 8.                 */                for (row = 0; row <= ROWS; row++)                        board.bigDot(row, row);                break;        case 8:                /*                   The only way I could figure out how to draw this was to have two separate loops one going down (like 7) and then the other to go after it and come back up, essentially reversing it.                 */                for (row = 0; row <= ROWS; row++) {                        board.bigDot(row, row);                };                for (col = COLS, row=0; col>=0; col--,row++) {                        board.bigDot(row,col);                };                break;        case 9:                /*                   I actually didn't find this difficult. After writing down what I needed then I saw that the row and col were directly correlated (the graph shrinks as it moves to the right). So I just had to figure out how to make them move the right way.                 */                for (col = 0; col < 4; col++,ROWS--,row++ ) {                        for(row = col; row < ROWS; row++) {                                board.bigDot(row, col);                        }                }                break;        case 10:                /*                   I thought this would be easy after 9 but it took me hours. I really didn't want to do 2 sets of for loops but what about 2 for loops inside of one? That's what I got working over here. I couldn't perfectly take 9 because the way I created 9 was a bit forced (I may tweak it later to make the code a little cleaner)                 */                for(col=0; col<COLS; col++) {                        for(row=col; row < ROWS-col; row++) {                                board.bigDot(row,col);                        }                        for(row = ROWS-col-1; row <=col; row++) {                                board.bigDot(row,col);                        }                }                break;        case 11:                /*                   I couldn't figure out a way to do this without two sets of for loops.                   each board.bigDot() creates one line. This one feels really forced but I can't think of a better way to do it.                 */                // Top L                for(col = 0, row = 0; row < ROWS; row++) {                        for(; col<COLS; col++)                                board.bigDot(0,col);                        board.bigDot(row,7);                }                // Bottom L                for(col = 7, row = 7; row>0; row--) {                        for(; col>0; col--)                                board.bigDot(7,col);                        board.bigDot(row,0);                }                break;        case 12:                /*                   So for 12, what I need to do is slowly shrink my col and my row. I'll probably need 2 sets of loops again.                   and I should take what I learned from case 9. Have them shrink to eventually nothing so that might actually have a third loop?                 */                //  for k I want everything to start out at 8 long and shrink after 3 sets (or one session of case 11) so maybe I don't want k at all?                for (k=0; k<4; k++ ) {                        // TODO: right now k isn't working but I think it's the right way to think about it. Technichally it'll get me there if I make it les than ROWS or COLS but it's drawing a bunch of funky lines, i'm going to have to write this one out when I get home                        // k=0;                        // Top L                        for(col = k, row = 0; row < ROWS; row++) {                                for(; col<COLS; col++)                                        board.bigDot(k,col);                                board.bigDot(row,COLS-k-1);                        }                        // Bottom L                        for(col = COLS-k-1, row = 7; row>0; row--) {                                for(; col>0; col--)                                        board.bigDot(COLS-k-1,col);                                board.bigDot(row,k);                        }                }                break;        case 13:                /*                   so the length of the number of columns can't be greater than three. they start at -1,0,1 and then just adds 1 to each as it iterates along the rows.                 */                for (row = 0; row<ROWS; row++ ) {                        for (col = (row-1); col<= (row+1); col++) {                                if (col < 0) {                                        col=0;                                }                                else if (col > 7) {                                        col = 7;                                }                                board.bigDot(row,col);                                if (col == 7)                                        break;                        }                }        case 14:                /*                   This will just be case 13 and case 7 combined. it shouldn't be too difficult.                 */                for (row = 0; row<ROWS; row++ ) {                        for (col = (row-1); col<=(row+1); col++) {                                if (col <0) {                                        col=0;                                }                                else if (col > 7) {                                        col = 7;                                }                                board.bigDot(row,col);                                if (col == 7)                                        break;                        }                }                for (k = 0; k < ROWS; k++)                        board.bigDot(k, k);                break;        default:                System.out.println("This one hasn't been done yet.");                break;        }}/**  Method to read in from user which pattern to do next.  If the *  user enters an integer between 1 and MAXPATTERN this value is *  returned; if the user enters q it returns -1; if the user *  enters something else it returns the current pattern; */public int getPattern(){        //set the default pattern, in case its needed        int defaultPattern = ++pattern;        if (defaultPattern > MAXPATTERN) defaultPattern = 1;        int newPattern = defaultPattern;        System.out.print("What Pattern? [" + defaultPattern + " default, q to quit]: ");        //read user input        String answer = reader.nextLine();        //if user did not enter RETURN        if (answer.length() != 0) {                // a temporary scanner just to read the line                Scanner lineReader = new Scanner(answer);                //if an integer                if (lineReader.hasNextInt()) {                        newPattern= lineReader.nextInt();                        if (newPattern < 1 || newPattern > MAXPATTERN) {                                System.out.println("Pattern out of range---set to default=" + defaultPattern);                                newPattern = defaultPattern;                        }                } else { //not an integer                        if (answer.charAt(0) == 'q') newPattern = -1;                        //else newPattern = pattern;                }        }        //correctness check        assert ((newPattern == -1)  || (newPattern >= 1 && newPattern <= 16)) : "invalid pattern";        return newPattern;}/**  Main loop.  Check if user wants pattern, then execute it. */public void UserLoop(){        //System.out.println("Dot Patterns");        //System.out.println(" ");        boolean keepPlaying = true;        while (keepPlaying)  {                // request next pattern code                pattern = getPattern();                //System.out.println("you said pattern: " + pattern);                //did the user want to quit?                if (pattern == -1)                        keepPlaying = false;                else                        drawPattern(pattern); // draw the pattern        }}public static void main(String args[]){        // OPEN THE TEXT AND DRAWING WINDOWS:        Dots d = new Dots();        System.out.println("Welcome to the dot pattern generator.");        //THE BODY OF THE MAIN FUNCTION        d.UserLoop();        //THAT'S IT. QUIT WHEN USER HITS RETURN        System.out.println("Terminating Program. Good bye.");        System.exit(1);}      // end main  public Dots()} //end class Dots