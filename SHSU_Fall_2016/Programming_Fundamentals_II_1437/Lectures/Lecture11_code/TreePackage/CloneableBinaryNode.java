package TreePackage;/**   A class that represents nodes in a binary tree (clonable version).      @author Frank M. Carrano   @author Timothy M. Henry   @version 4.0*/class CloneableBinaryNode<T> implements Cloneable{   private T             data;   private CloneableBinaryNode<T> left;  // Reference to left child   private CloneableBinaryNode<T> right; // Reference to right child   public CloneableBinaryNode()   {      this(null); // Call next constructor   } // end default constructor   public CloneableBinaryNode(T dataPortion)   {      this(dataPortion, null, null); // Call next constructor   } // end constructor   public CloneableBinaryNode(T dataPortion, CloneableBinaryNode<T> leftChild,                                             CloneableBinaryNode<T> rightChild)   {      data = dataPortion;      left = leftChild;      right = rightChild;   } // end constructor   /** Retrieves the data portion of this node.       @return  The object in the data portion of the node. */   public T getData()   {      return data;   } // end getData   /** Sets the data portion of this node.       @param newData  The data object. */   public void setData(T newData)   {      data = newData;   } // end setData   /** Retrieves the left child of this node.       @return  The node’s left child. */   public CloneableBinaryNode<T> getLeftChild()   {      return left;   } // end getLeftChild   /** Retrieves the right child of this node.       @return  The node’s right child. */   public CloneableBinaryNode<T> getRightChild()   {      return right;   } // end getRightChild   /** Sets this node’s left child to a given node.       @param leftChild  A node that will be the left child. */   public void setLeftChild(CloneableBinaryNode<T> leftChild)   {      left = leftChild;   } // end setLeftChild   /** Sets this node’s right child to a given node.       @param rightChild  A node that will be the right child. */   public void setRightChild(CloneableBinaryNode<T> rightChild)   {      right = rightChild;   } // end setRightChild	   /** Detects whether this node has a left child.       @return  True if the node has a left child. */   public boolean hasLeftChild()   {      return left != null;   } // end hasLeftChild   /** Detects whether this node has a right child.       @return  True if the node has a right child. */   public boolean hasRightChild()   {      return right != null;   } // end hasRightChild      /** Detects whether this node is a leaf.       @return  True if the node is a leaf. */   public boolean isLeaf()   {      return (left == null) && (right == null);   } // end isLeaf   /** Counts the nodes in the subtree rooted at this node.       @return  The number of nodes in the subtree rooted at this node. */   public int getNumberOfNodes()   {      int leftNumber = 0;      int rightNumber = 0;            if (left != null)         leftNumber = left.getNumberOfNodes();            if (right != null)         rightNumber = right.getNumberOfNodes();            return 1 + leftNumber + rightNumber;   } // end getNumberOfNodes      /** Computes the height of the subtree rooted at this node.       @return  The height of the subtree rooted at this node. */   public int getHeight()   {      return getHeight(this); // Call private getHeight   } // end getHeight   private int getHeight(CloneableBinaryNode<T> node)   {      int height = 0;      if (node != null)         height = 1 + Math.max(getHeight(node.left), getHeight(node.right));                                   return height;   } // end getHeight   /** Makes a clone of this node and its subtrees.       @return  The clone of the subtree rooted at this node. */   public Object clone()   {      CloneableBinaryNode<T> theCopy = null;      try      {         @SuppressWarnings("unchecked")         CloneableBinaryNode<T> temp = (CloneableBinaryNode<T>)super.clone();         theCopy = temp;      }      catch (CloneNotSupportedException e)      {         throw new Error("CloneableBinaryNode cannot clone: " + e.toString());      }       //   theCopy.data = (T)data.clone();            if (left != null)      {         @SuppressWarnings("unchecked")         CloneableBinaryNode<T> temp = (CloneableBinaryNode<T>)left.clone();         theCopy.left = temp;      } // end if            if (right != null)      {         @SuppressWarnings("unchecked")         CloneableBinaryNode<T> temp = (CloneableBinaryNode<T>)right.clone();         theCopy.right = temp;      } // end if         return theCopy;   } // end clone} // end CloneableBinaryNode